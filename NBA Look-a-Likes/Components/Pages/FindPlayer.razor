@* @page "/find"
@using NBA_App.DTO
@using NBA_App.Data
@using NBA_App.Model
@rendermode InteractiveServer
@inject PlayerDataAccess PlayerDataAccess

<h3>Find NBA Players by Stats</h3>

<EditForm OnValidSubmit="SearchPlayers">
    <div class="row mb-3">
        <div class="col">
            <label>Min PPG</label>
            <InputNumber @bind-Value="filters.MinPPG" class="form-control" />
        </div>
        <div class="col">
            <label>Max Turnovers</label>
            <InputNumber @bind-Value="filters.MaxTurnovers" class="form-control" />
        </div>
        <div class="col">
            <label>Min 3P%</label>
            <InputNumber @bind-Value="filters.MinThreeP" class="form-control" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col">
            <label>Min APG</label>
            <InputNumber @bind-Value="filters.MinAPG" class="form-control" />
        </div>
        <div class="col">
            <label>Min RPG</label>
            <InputNumber @bind-Value="filters.MinRPG" class="form-control" />
        </div>
        <div class="col">
            <label>Min FG%</label>
            <InputNumber @bind-Value="filters.MinFGP" class="form-control" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Search</button>
</EditForm>

@if (results.Any())
{
    <h5 class="mt-4">Results</h5>
    <ul>
        @foreach (var p in results)
        {
            <li><a href="/player/@p.PlayerID">@p.FirstName @p.LastName</a> – PPG: @p.PPG, FG%: @p.FGPercentage.ToString("P1")</li>
        }
    </ul>
}
else if (searched)
{
    <p>No matching players found.</p>
}

@code {
    private StatFilter filters = new();
    private List<Player> results = new(); // reuse this class
    private bool searched = false;

    private async Task SearchPlayers()
    {
        results = await PlayerDataAccess.FindPlayersByStatsAsync(filters);
        searched = true;
    }
}
 *@